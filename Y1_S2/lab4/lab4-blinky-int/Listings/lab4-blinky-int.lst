


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 4 - blinky-int
    4 00000000         ;
    5 00000000 E0004000 
                       T0IR    EQU              0xE0004000
    6 00000000 E0004004 
                       T0TCR   EQU              0xE0004004
    7 00000000 E0004018 
                       T0MR0   EQU              0xE0004018
    8 00000000 E0004014 
                       T0MCR   EQU              0xE0004014
    9 00000000         
   10 00000000 E002C010 
                       PINSEL4 EQU              0xE002C010
   11 00000000         
   12 00000000 3FFFC041 
                       FIO2DIR1
                               EQU              0x3FFFC041
   13 00000000 3FFFC055 
                       FIO2PIN1
                               EQU              0x3FFFC055
   14 00000000         
   15 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
   16 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
   17 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
   18 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
   19 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
   20 00000000         
   21 00000000 00000004 
                       VICVectT0
                               EQU              4
   22 00000000         
   23 00000000 00000080 
                       Irq_Stack_Size
                               EQU              0x80
   24 00000000         
   25 00000000 00000010 
                       Mode_USR
                               EQU              0x10
   26 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   27 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   28 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled



ARM Macro Assembler    Page 2 


   29 00000000         
   30 00000000         
   31 00000000                 AREA             RESET, CODE, READONLY
   32 00000000                 ENTRY
   33 00000000         
   34 00000000         ; Exception Vectors
   35 00000000         
   36 00000000 EA000006        B                Reset_Handler ; 0x00000000
   37 00000004 EA000032        B                Undef_Handler ; 0x00000004
   38 00000008 EA000032        B                SWI_Handler ; 0x00000008
   39 0000000C EA000032        B                PAbt_Handler ; 0x0000000C
   40 00000010 EA000032        B                DAbt_Handler ; 0x00000010
   41 00000014 E1A00000        NOP                          ; 0x00000014
   42 00000018 EA000031        B                IRQ_Handler ; 0x00000018
   43 0000001C EA000036        B                FIQ_Handler ; 0x0000001C
   44 00000020         
   45 00000020         ;
   46 00000020         ; Reset Exception Handler
   47 00000020         ;
   48 00000020         Reset_Handler
   49 00000020         
   50 00000020         ;
   51 00000020         ; Initialize Stack Pointers (SP) for each mode we are us
                       ing
   52 00000020         ;
   53 00000020         
   54 00000020         ; Stack Top
   55 00000020 E59F011C        LDR              R0, =0x40010000
   56 00000024         
   57 00000024         ; Enter undef mode and set initial SP
   58 00000024 E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
   59 00000028 E1A0D000        MOV              SP, R0
   60 0000002C E2400080        SUB              R0, R0, #Irq_Stack_Size
   61 00000030         
   62 00000030         ; Enter user mode and set initial SP
   63 00000030 E321F010        MSR              CPSR_c, #Mode_USR
   64 00000034 E1A0D000        MOV              SP, R0
   65 00000038         
   66 00000038         
   67 00000038         ;
   68 00000038         ; Initialise peripherals here
   69 00000038         ;
   70 00000038         
   71 00000038         ;
   72 00000038         ; Configure TIMER0
   73 00000038         ;
   74 00000038         
   75 00000038         ; Stop and reset TIMER0 using Timer Control Register
   76 00000038         ; Set bit 0 of TCR to 0 to stop TIMER
   77 00000038         ; Set bit 1 of TCR to 1 to reset TIMER
   78 00000038 E59F5108        LDR              R5, =T0TCR
   79 0000003C E3A06002        LDR              R6, =0x2
   80 00000040 E5C56000        STRB             R6, [R5]
   81 00000044         
   82 00000044         ; Clear any previous TIMER0 interrupt by writing 0xFF to
                        the TIMER0
   83 00000044         ; Interrupt Register (T0IR)
   84 00000044 E59F5100        LDR              R5, =T0IR



ARM Macro Assembler    Page 3 


   85 00000048 E3A060FF        LDR              R6, =0xFF
   86 0000004C E5C56000        STRB             R6, [R5]
   87 00000050         
   88 00000050         ; Set match register for 0.5 secs using Match Register
   89 00000050         ; Assuming a 1Mhz clock input to TIMER0, set MR
   90 00000050         ; MR0 (0xE0004018) to 500,000
   91 00000050 E59F40F8        LDR              R4, =T0MR0
   92 00000054 E59F50F8        LDR              R5, =500000
   93 00000058 E5845000        STR              R5, [R4]
   94 0000005C         
   95 0000005C         ; IRQ on match using Match Control Register
   96 0000005C         ; Set bit 0 of MCR to 1 to turn on interrupts
   97 0000005C         ; Set bit 1 of MCR to 1 to reset counter to 0 after ever
                       y match
   98 0000005C         ; Set bit 2 of MCR to 0 to leave the counter enabled aft
                       er match
   99 0000005C E59F40F4        LDR              R4, =T0MCR
  100 00000060 E3A05003        LDR              R5, =0x03
  101 00000064 E1C450B0        STRH             R5, [R4]
  102 00000068         
  103 00000068         ;
  104 00000068         ; Configure VIC for TIMER0 interrupts
  105 00000068         ;
  106 00000068         
  107 00000068         ; Useful VIC vector numbers and masks for following code
                       
  108 00000068 E3A03004        LDR              R3, =VICVectT0 ; vector 4
  109 0000006C E3A04010        LDR              R4, =(1 << VICVectT0) ; bit mas
                                                            k for vector 4
  110 00000070         
  111 00000070         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  112 00000070         ; channel 4 (TIMER0) to raise IRQs (not FIQs)
  113 00000070 E59F50E4        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  114 00000074 E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);
  115 00000078 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x04
  116 0000007C E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  117 00000080         
  118 00000080         ; Set Priority for VIC channel 4 (TIMER0) to lowest (15)
                        by setting
  119 00000080         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 4 of an
  120 00000080         ; array of 4-byte values that starts at VICVectPri0.
  121 00000080         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  122 00000080 E59F50D8        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  123 00000084 E3A0600F        MOV              R6, #15     ; pri = 15;
  124 00000088 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  125 0000008C         
  126 0000008C         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  127 0000008C         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element



ARM Macro Assembler    Page 4 


  128 0000008C         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  129 0000008C         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  130 0000008C E59F50D0        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  131 00000090 E59F60D0        LDR              R6, =Timer_Handler ; handler = 
                                                            address of TimerHan
                                                            dler;
  132 00000094 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  133 00000098         
  134 00000098         ; Enable VIC channel 4 (TIMER0) by writing a 1 to bit 4 
                       of VICIntEnable
  135 00000098 E59F50CC        LDR              R5, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  136 0000009C E5854000        STR              R4, [R5]    ; enable interrupts
                                                             for vector 0x4
  137 000000A0         
  138 000000A0         
  139 000000A0         ; Enable P2.10 for GPIO
  140 000000A0 E59F50C8        LDR              R5, =PINSEL4 ; load address of 
                                                            PINSEL4
  141 000000A4 E5956000        LDR              R6, [R5]    ; read current PINS
                                                            EL4 value
  142 000000A8 E3C66603        BIC              R6, #(0x3 << 20) ; modify bits 
                                                            20 and 21 to 00
  143 000000AC E5856000        STR              R6, [R5]    ; write new PINSEL4
                                                             value
  144 000000B0         
  145 000000B0         ; Set P2.10 for output
  146 000000B0 E59F50BC        LDR              R5, =FIO2DIR1 ; load address of
                                                             FIO2DIR1
  147 000000B4 E1A00000        NOP
  148 000000B8 E5D56000        LDRB             R6, [R5]    ; read current FIO2
                                                            DIR1 value
  149 000000BC E3866004        ORR              R6, #(0x1 << 2) ; modify bit 2 
                                                            to 1 for output, le
                                                            aving other bits un
                                                            modified
  150 000000C0 E5C56000        STRB             R6, [R5]    ; write new FIO2DIR
                                                            1
  151 000000C4         
  152 000000C4         ; Start TIMER0 using the Timer Control Register
  153 000000C4         ; Set bit 0 of TCR (0xE0004004) to enable the timer
  154 000000C4 E59F407C        LDR              R4, =T0TCR
  155 000000C8 E3A05001        LDR              R5, =0x01
  156 000000CC E5C45000        STRB             R5, [R4]
  157 000000D0         
  158 000000D0 EAFFFFFE 
                       STOP    B                STOP
  159 000000D4         
  160 000000D4         
  161 000000D4         ;
  162 000000D4         ; Software Interrupt Exception Handler
  163 000000D4         ;
  164 000000D4         Undef_Handler
  165 000000D4 EAFFFFFE        B                Undef_Handler
  166 000000D8         



ARM Macro Assembler    Page 5 


  167 000000D8         ;
  168 000000D8         ; Software Interrupt Exception Handler
  169 000000D8         ;
  170 000000D8         SWI_Handler
  171 000000D8 EAFFFFFE        B                SWI_Handler
  172 000000DC         
  173 000000DC         ;
  174 000000DC         ; Prefetch Abort Exception Handler
  175 000000DC         ;
  176 000000DC         PAbt_Handler
  177 000000DC EAFFFFFE        B                PAbt_Handler
  178 000000E0         
  179 000000E0         ;
  180 000000E0         ; Data Abort Exception Handler
  181 000000E0         ;
  182 000000E0         DAbt_Handler
  183 000000E0 EAFFFFFE        B                DAbt_Handler
  184 000000E4         
  185 000000E4         ;
  186 000000E4         ; Interrupt ReQuest (IRQ) Exception Handler (top level -
                        all devices)
  187 000000E4         ;
  188 000000E4         IRQ_Handler
  189 000000E4 E24EE004        SUB              lr, lr, #4  ; for IRQs, LR is a
                                                            lways 4 more than t
                                                            he
  190 000000E8         ; real return address
  191 000000E8 E92D400F        STMFD            sp!, {r0-r3,lr} 
                                                            ; save r0-r3 and lr
                                                            
  192 000000EC         
  193 000000EC E3E000FF        LDR              r0, =VICVectAddr ; address of V
                                                            IC Vector Address m
                                                            emory-
  194 000000F0         ; mapped register
  195 000000F0         
  196 000000F0 E1A0E00F        MOV              lr, pc      ; can’t use BL he
                                                            re because we are b
                                                            ranching
  197 000000F4 E590F000        LDR              pc, [r0]    ; to a different su
                                                            broutine dependant 
                                                            on device
  198 000000F8         ; raising the IRQ - this is a manual BL !!
  199 000000F8         
  200 000000F8 E8FD800F        LDMFD            sp!, {r0-r3, pc}^ ; restore r0-
                                                            r3, lr and CPSR
  201 000000FC         
  202 000000FC         ;
  203 000000FC         ; Fast Interrupt reQuest Exception Handler
  204 000000FC         ;
  205 000000FC         FIQ_Handler
  206 000000FC EAFFFFFE        B                FIQ_Handler
  207 00000100         
  208 00000100         ;
  209 00000100         ; TIMER0 IRQ Handler (device-specific handler called by 
                       top-level IRQ_Handler)
  210 00000100         ;
  211 00000100         Timer_Handler
  212 00000100         



ARM Macro Assembler    Page 6 


  213 00000100 E92D4030        STMFD            sp!, {r4-r5, lr}
  214 00000104         
  215 00000104         ; Reset TIMER0 interrupt by writing 0xFF to T0IR
  216 00000104 E59F4040        LDR              R4, =T0IR
  217 00000108 E3A050FF        MOV              R5, #0xFF
  218 0000010C E5C45000        STRB             R5, [R4]
  219 00000110         
  220 00000110         ;
  221 00000110         ; take some action here when the timer expires!
  222 00000110         ;
  223 00000110         
  224 00000110         ; Clear source of interrupt by writing 0 to VICVectAddr
  225 00000110 E3E040FF        LDR              R4, =VICVectAddr
  226 00000114 E3A05000        MOV              R5, #0
  227 00000118 E5845000        STR              R5, [R4]
  228 0000011C         
  229 0000011C         ;
  230 0000011C         ; Timer finished ... invert the LED
  231 0000011C         ;   Another Read-Modify-Write operation!!
  232 0000011C         ;
  233 0000011C         
  234 0000011C         ; read current P2.10 output value
  235 0000011C         ;   0 or 1 in bit 2 of FIO2PIN1
  236 0000011C E3A04004        LDR              R4, =0x04   ;   setup bit mask 
                                                            for P2.10 bit in FI
                                                            O2PIN1
  237 00000120 E59F5050        LDR              R5, =FIO2PIN1 ;
  238 00000124 E5D56000        LDRB             R6, [R5]    ;   read FIO2PIN1
  239 00000128         
  240 00000128         ; modify P2.10 output (leaving other pin outputs control
                       led by
  241 00000128         ;   FIO2PIN1 with their original value)
  242 00000128         
  243 00000128 E1160004        TST              R6, R4      ;   if (LED off)
  244 0000012C 1A000001        BNE              elsOff      ;   {
  245 00000130 E1866004        ORR              R6, R6, R4  ;     set bit 2 (tu
                                                            rn LED on)
  246 00000134 EA000000        B                endIf       ;   }
  247 00000138         elsOff                               ;   else {
  248 00000138 E1C66004        BIC              R6, R6, R4  ;     clear bit 2 (
                                                            turn LED on)
  249 0000013C         endIf                                ;   }
  250 0000013C         
  251 0000013C         ;   }
  252 0000013C         ; write new FIO2PIN1 value
  253 0000013C E5C56000        STRB             R6, [R5]
  254 00000140 E8BD8030        LDMFD            sp!, {r4-r5, pc}
  255 00000144         
  256 00000144                 END
              40010000 
              E0004004 
              E0004000 
              E0004018 
              0007A120 
              E0004014 
              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 



ARM Macro Assembler    Page 7 


              FFFFF010 
              E002C010 
              3FFFC041 
              3FFFC055 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab4-blinky-int.d -o.\objects\lab4-blinky-int.o -IC:\Keil_v5\ARM\RV31\IN
C -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__UV
ISION_VERSION SETA 516" --list=.\listings\lab4-blinky-int.lst lab4-blinky-int.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DAbt_Handler 000000E0

Symbol: DAbt_Handler
   Definitions
      At line 182 in file lab4-blinky-int.s
   Uses
      At line 40 in file lab4-blinky-int.s
      At line 183 in file lab4-blinky-int.s

FIQ_Handler 000000FC

Symbol: FIQ_Handler
   Definitions
      At line 205 in file lab4-blinky-int.s
   Uses
      At line 43 in file lab4-blinky-int.s
      At line 206 in file lab4-blinky-int.s

IRQ_Handler 000000E4

Symbol: IRQ_Handler
   Definitions
      At line 188 in file lab4-blinky-int.s
   Uses
      At line 42 in file lab4-blinky-int.s
Comment: IRQ_Handler used once
PAbt_Handler 000000DC

Symbol: PAbt_Handler
   Definitions
      At line 176 in file lab4-blinky-int.s
   Uses
      At line 39 in file lab4-blinky-int.s
      At line 177 in file lab4-blinky-int.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 31 in file lab4-blinky-int.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000020

Symbol: Reset_Handler
   Definitions
      At line 48 in file lab4-blinky-int.s
   Uses
      At line 36 in file lab4-blinky-int.s
Comment: Reset_Handler used once
STOP 000000D0

Symbol: STOP
   Definitions
      At line 158 in file lab4-blinky-int.s
   Uses
      At line 158 in file lab4-blinky-int.s
Comment: STOP used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

SWI_Handler 000000D8

Symbol: SWI_Handler
   Definitions
      At line 170 in file lab4-blinky-int.s
   Uses
      At line 38 in file lab4-blinky-int.s
      At line 171 in file lab4-blinky-int.s

Timer_Handler 00000100

Symbol: Timer_Handler
   Definitions
      At line 211 in file lab4-blinky-int.s
   Uses
      At line 131 in file lab4-blinky-int.s
Comment: Timer_Handler used once
Undef_Handler 000000D4

Symbol: Undef_Handler
   Definitions
      At line 164 in file lab4-blinky-int.s
   Uses
      At line 37 in file lab4-blinky-int.s
      At line 165 in file lab4-blinky-int.s

elsOff 00000138

Symbol: elsOff
   Definitions
      At line 247 in file lab4-blinky-int.s
   Uses
      At line 244 in file lab4-blinky-int.s
Comment: elsOff used once
endIf 0000013C

Symbol: endIf
   Definitions
      At line 249 in file lab4-blinky-int.s
   Uses
      At line 246 in file lab4-blinky-int.s
Comment: endIf used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2DIR1 3FFFC041

Symbol: FIO2DIR1
   Definitions
      At line 12 in file lab4-blinky-int.s
   Uses
      At line 146 in file lab4-blinky-int.s
Comment: FIO2DIR1 used once
FIO2PIN1 3FFFC055

Symbol: FIO2PIN1
   Definitions
      At line 13 in file lab4-blinky-int.s
   Uses
      At line 237 in file lab4-blinky-int.s
Comment: FIO2PIN1 used once
F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 28 in file lab4-blinky-int.s
   Uses
      At line 58 in file lab4-blinky-int.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 27 in file lab4-blinky-int.s
   Uses
      At line 58 in file lab4-blinky-int.s
Comment: I_Bit used once
Irq_Stack_Size 00000080

Symbol: Irq_Stack_Size
   Definitions
      At line 23 in file lab4-blinky-int.s
   Uses
      At line 60 in file lab4-blinky-int.s
Comment: Irq_Stack_Size used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 26 in file lab4-blinky-int.s
   Uses
      At line 58 in file lab4-blinky-int.s
Comment: Mode_IRQ used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 25 in file lab4-blinky-int.s
   Uses
      At line 63 in file lab4-blinky-int.s
Comment: Mode_USR used once
PINSEL4 E002C010

Symbol: PINSEL4



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 10 in file lab4-blinky-int.s
   Uses
      At line 140 in file lab4-blinky-int.s
Comment: PINSEL4 used once
T0IR E0004000

Symbol: T0IR
   Definitions
      At line 5 in file lab4-blinky-int.s
   Uses
      At line 84 in file lab4-blinky-int.s
      At line 216 in file lab4-blinky-int.s

T0MCR E0004014

Symbol: T0MCR
   Definitions
      At line 8 in file lab4-blinky-int.s
   Uses
      At line 99 in file lab4-blinky-int.s
Comment: T0MCR used once
T0MR0 E0004018

Symbol: T0MR0
   Definitions
      At line 7 in file lab4-blinky-int.s
   Uses
      At line 91 in file lab4-blinky-int.s
Comment: T0MR0 used once
T0TCR E0004004

Symbol: T0TCR
   Definitions
      At line 6 in file lab4-blinky-int.s
   Uses
      At line 78 in file lab4-blinky-int.s
      At line 154 in file lab4-blinky-int.s

VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 16 in file lab4-blinky-int.s
   Uses
      At line 135 in file lab4-blinky-int.s
Comment: VICIntEnable used once
VICIntSelect FFFFF00C

Symbol: VICIntSelect
   Definitions
      At line 15 in file lab4-blinky-int.s
   Uses
      At line 113 in file lab4-blinky-int.s
Comment: VICIntSelect used once
VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 19 in file lab4-blinky-int.s
   Uses
      At line 193 in file lab4-blinky-int.s
      At line 225 in file lab4-blinky-int.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 17 in file lab4-blinky-int.s
   Uses
      At line 130 in file lab4-blinky-int.s
Comment: VICVectAddr0 used once
VICVectPri0 FFFFF200

Symbol: VICVectPri0
   Definitions
      At line 18 in file lab4-blinky-int.s
   Uses
      At line 122 in file lab4-blinky-int.s
Comment: VICVectPri0 used once
VICVectT0 00000004

Symbol: VICVectT0
   Definitions
      At line 21 in file lab4-blinky-int.s
   Uses
      At line 108 in file lab4-blinky-int.s
      At line 109 in file lab4-blinky-int.s

18 symbols
363 symbols in table
