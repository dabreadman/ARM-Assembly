


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 2 - Subroutines
    4 00000000         ;
    5 00000000         
    6 00000000 00000004 
                       N       EQU              4
    7 00000000 00000020 
                       BUFLEN  EQU              32
    8 00000000         
    9 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   10 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   11 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   12 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   13 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   14 00000000         
   15 00000000         
   16 00000000                 AREA             globals, DATA, READWRITE
   17 00000000         
   18 00000000         ; char buffer
   19 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    BUFFER  SPACE            BUFLEN      ; BUFLEN bytes
   20 00000020         
   21 00000020         ; result array
   22 00000020 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       ARR_R   SPACE            N*4         ; N words (4 bytes 
                                                            each)
   23 00000030         
   24 00000030         
   25 00000030                 AREA             RESET, CODE, READONLY
   26 00000000                 ENTRY
   27 00000000         
   28 00000000         
   29 00000000 EB00004D        BL               inithw
   30 00000004         
   31 00000004         
   32 00000004         ; Q1 i
   33 00000004         ;MOV R1,#2; ; A = 2
   34 00000004         ;MOV R2,#3  ; B = 3 
   35 00000004         ;BL max  ; calls subroutine max
   36 00000004         



ARM Macro Assembler    Page 2 


   37 00000004         ;Q1 ii
   38 00000004         ;LDR R1,=0x40001000 ; buffer starting address
   39 00000004         ;MOV R2,#4   ; LEN=4
   40 00000004         ;BL gets   ; calls subroutine gets
   41 00000004         
   42 00000004         ;Q1 iii
   43 00000004 E59F0248        LDR              R0,=ARR_A
   44 00000008 E59F1248        LDR              R1,=ARR_B
   45 0000000C E3A02101        LDR              R2,=0x40000000 ; result matrix 
                                                            address
   46 00000010 EB00001C        BL               matmul      ; calls subroutine 
                                                            matmul
   47 00000014         
   48 00000014         
   49 00000014 E3A00101        LDR              R0,=0x40000000
   50 00000018 E3A01002        MOV              R1,#2
   51 0000001C E3A02005        MOV              R2,#5
   52 00000020 EB00003D        BL               swap
   53 00000024         
   54 00000024         
   55 00000024         ;
   56 00000024         ; invoke your max subroutine to test it
   57 00000024         ;
   58 00000024         
   59 00000024         ;
   60 00000024         ; invoke your gets subroutine to test it
   61 00000024         ;
   62 00000024         
   63 00000024         ;
   64 00000024         ; invoke your matmul subroutine to test it
   65 00000024         ;
   66 00000024         
   67 00000024         
   68 00000024 EAFFFFFE 
                       STOP    B                STOP
   69 00000028         
   70 00000028         
   71 00000028         ;Q1 (i)
   72 00000028         ; max subroutine
   73 00000028         ; Returns the largest value of two signed integers to R0
                       
   74 00000028         ; Parameters
   75 00000028         ; R1 - integer
   76 00000028         ; R2 - another integer
   77 00000028         
   78 00000028         
   79 00000028 E52DE004 
                       max     PUSH{LR}
   80 0000002C E1510002        CMP              R1,R2
   81 00000030 CA000001        BGT              A
   82 00000034 E1A00002        MOV              R0,R2
   83 00000038 EA000000        B                max1
   84 0000003C         
   85 0000003C E1A00001 
                       A       MOV              R0,R1
   86 00000040         
   87 00000040 E49DF004 
                       max1    POP{PC}
   88 00000044         



ARM Macro Assembler    Page 3 


   89 00000044         ;Q1 (ii)
   90 00000044         ; gets subroutine
   91 00000044         ; read up to len-1 chars from from the console, storing 
                       the resulting NULL-terminated string in buffer
   92 00000044         ; and returning the number of characters read in R0
   93 00000044         ; Parameters
   94 00000044         ; R1 - address - char[]buffer
   95 00000044         ; R2 - length - amount of characters to read from consol
                       e
   96 00000044         
   97 00000044         
   98 00000044         
   99 00000044 E92D4030 
                       gets    PUSH{R4-R5,LR}
  100 00000048 E1A04001        MOV              R4,R1       ; R4 = BUFFER 
  101 0000004C E1A05002        MOV              R5,R2       ; R5 = LEN
  102 00000050 E59F0204        LDR              R0,=STR0    ; loads STR0 into R
                                                            0
  103 00000054 EB000051        BL               puts        ; output STR0 to th
                                                            e console
  104 00000058 E3A03001        MOV              R3,#1       ; Counter
  105 0000005C         
  106 0000005C E1530005 
                       gets0   CMP              R3, R5      ; while (<len-1)
  107 00000060 0A000006        BEQ              getsE
  108 00000064 EB00003B        BL               get         ; get a char from c
                                                            onsole
  109 00000068 EB000041        BL               put         ; display the char 
                                                            on console
  110 0000006C E350000D        CMP              R0,#0x0D    ; if (char!= CR)
  111 00000070 0A000002        BEQ              getsE
  112 00000074 E4840004        STR              R0,[R4],#4  ; stores the char i
                                                            n BUFFER, and post-
                                                            increment by 4
  113 00000078 E2833001        ADD              R3,R3,#1    ; Count++
  114 0000007C EAFFFFF6        B                gets0
  115 00000080         
  116 00000080 E1A00003 
                       getsE   MOV              R0,R3       ; Count 
  117 00000084 E8BD8030        POP{R4-R5,PC}
  118 00000088         
  119 00000088         
  120 00000088         ;Q1 (iii)
  121 00000088         ; matmul
  122 00000088         ; multiply two matrices and storing the result in destin
                       ation matrix (A * B = R)
  123 00000088         ; Parameters
  124 00000088         ; R0 - matrix A
  125 00000088         ; R1 - matrix B
  126 00000088         ; R2 - result matrix R
  127 00000088         
  128 00000088 E92D4FF8 
                       matmul  PUSH{R3-R11,LR}
  129 0000008C         
  130 0000008C         
  131 0000008C E3A03004        LDR              R3, =N
  132 00000090         
  133 00000090 E3A04000        LDR              R4, = 0     ;i
  134 00000094 E3A05000        LDR              R5, = 0     ;j



ARM Macro Assembler    Page 4 


  135 00000098 E3A06000        LDR              R6, = 0     ;k
  136 0000009C E3A07000        LDR              R7, = 0     ;r
  137 000000A0 E3A0B004        LDR              R11, = 4    ; byte offset]
  138 000000A4         
  139 000000A4         
  140 000000A4 E1540003 
                       fLoop1Start
                               CMP              R4, R3
  141 000000A8 AA00001A        BGE              fLoop1End
  142 000000AC         
  143 000000AC         
  144 000000AC E1550003 
                       fLoop2Start
                               CMP              R5, R3
  145 000000B0 AA000015        BGE              fLoop2End
  146 000000B4         
  147 000000B4 E3A07000        MOV              R7, #0      ; r = 0
  148 000000B8         
  149 000000B8 E1560003 
                       fLoop3Start
                               CMP              R6, R3
  150 000000BC AA00000B        BGE              fLoop3End
  151 000000C0         
  152 000000C0 E0080693        MUL              R8, R3, R6  ;kN
  153 000000C4 E0888004        ADD              R8, R8, R4  ;kN + i
  154 000000C8 E008089B        MUL              R8, R11, R8 ;Add byte offset to
                                                             index
  155 000000CC         
  156 000000CC E7908008        LDR              R8, [R0, R8] ; Load value at A[
                                                            i,k]
  157 000000D0         
  158 000000D0         
  159 000000D0 E0090593        MUL              R9, R3, R5  ;jN
  160 000000D4 E0899006        ADD              R9, R9, R6  ;jN + k
  161 000000D8 E009099B        MUL              R9, R11, R9 ;Add byte offset to
                                                             index
  162 000000DC         
  163 000000DC E7909009        LDR              R9, [R0, R9] ; Load value at B[
                                                            k,j]
  164 000000E0         
  165 000000E0         
  166 000000E0 E0080899        MUL              R8, R9, R8  ; A[ i , k ] * B[ k
                                                             , j ]
  167 000000E4 E0877008        ADD              R7, R7, R8  ; r = r + ( A[ i , 
                                                            k ] * B[ k , j ]
  168 000000E8         
  169 000000E8 E2866001        ADD              R6, R6, #1  ;k++
  170 000000EC EAFFFFF1        B                fLoop3Start
  171 000000F0         
  172 000000F0         
  173 000000F0 E00A0593 
                       fLoop3End
                               MUL              R10, R3, R5 ;[i,j] 1D convert..
                                                            ..could use r9?
  174 000000F4 E08AA004        ADD              R10, R10, R4 ;[i,j] 1D convert
  175 000000F8 E00A0A9B        MUL              R10, R11, R10 ;Add byte offset 
                                                            to index........ R1
                                                            0 = memory address 
                                                            of [i,j]



ARM Macro Assembler    Page 5 


  176 000000FC         
  177 000000FC E78A7002        STR              R7 , [R10,R2] ;R[ i , j ] = r ;
                                                            
  178 00000100         
  179 00000100 E2855001        ADD              R5, R5, #1  ;j++
  180 00000104 E3A06000        MOV              R6, #0
  181 00000108 EAFFFFE7        B                fLoop2Start
  182 0000010C         
  183 0000010C E2844001 
                       fLoop2End
                               ADD              R4, R4, #1  ;i++
  184 00000110         
  185 00000110 E3A05000        MOV              R5, #0
  186 00000114         
  187 00000114 EAFFFFE2        B                fLoop1Start
  188 00000118         
  189 00000118 E8BD9FF0 
                       fLoop1End
                               POP{R4-R12,PC}
  190 0000011C         
  191 0000011C         ;-------------------------------------------------------
                       -----------------------------------
  192 0000011C         ;Q2a
  193 0000011C         
  194 0000011C         ;swap(array, i, j)
  195 0000011C         ;
  196 0000011C         ;
  197 0000011C         ; swap
  198 0000011C         ; swaps two element of a 1*1 dimension array
  199 0000011C         ; Parameters
  200 0000011C         ; R0 - array
  201 0000011C         ; R1 - first element index
  202 0000011C         ; R2 - second element index
  203 0000011C         
  204 0000011C E92D4030 
                       swap    PUSH{R4-R5,LR}
  205 00000120 E1A04001        MOV              R4,R1       ; first element ind
                                                            ex
  206 00000124 E1A05002        MOV              R5,R2       ; second element in
                                                            dex
  207 00000128         
  208 00000128 E7901104        LDR              R1,[R0,R4, LSL#2] 
                                                            ; element address 1
                                                            
  209 0000012C E7902105        LDR              R2,[R0,R5, LSL#2] 
                                                            ; element address 2
                                                            
  210 00000130         
  211 00000130 E7801105        STR              R1,[R0,R5, LSL#2]
  212 00000134 E7802104        STR              R2,[R0,R4, LSL#2]
  213 00000138 E8BD8030        POP              {R4-R5,PC}
  214 0000013C         
  215 0000013C         
  216 0000013C         
  217 0000013C         ;
  218 0000013C         ; inithw subroutines
  219 0000013C         ; performs hardware initialisation, including console
  220 0000013C         ; parameters:
  221 0000013C         ; none



ARM Macro Assembler    Page 6 


  222 0000013C         ; return value:
  223 0000013C         ; none
  224 0000013C         ;
  225 0000013C         inithw
  226 0000013C E59F011C        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  227 00000140 E3A01050        MOV              R1, #0x50
  228 00000144 E5C01000        STRB             R1, [R0]
  229 00000148 E59F0114        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  230 0000014C E3A01002        LDR              R1, =0x02
  231 00000150 E5C01000        STRB             R1, [R0]
  232 00000154 E12FFF1E        BX               LR
  233 00000158         
  234 00000158         ;
  235 00000158         ; get subroutine
  236 00000158         ; returns the ASCII code of the next character read on t
                       he console
  237 00000158         ; parameters:
  238 00000158         ; none
  239 00000158         ; return value:
  240 00000158         ; R0 - ASCII code of the character read on teh console (
                       byte)
  241 00000158         ;
  242 00000158 E59F1108 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  243 0000015C E5910000 
                       get0    LDR              R0, [R1]    ; wait until
  244 00000160 E2100001        ANDS             R0, #0x01   ; receiver data
  245 00000164 0AFFFFFC        BEQ              get0        ; ready
  246 00000168 E59F10FC        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  247 0000016C E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  248 00000170 E12FFF1E        BX               LR          ; return
  249 00000174         
  250 00000174         ;
  251 00000174         ; put subroutine
  252 00000174         ; writes a character to the console
  253 00000174         ; parameters:
  254 00000174         ; R0 - ASCII code of the character to write
  255 00000174         ; return value:
  256 00000174         ; none
  257 00000174         ;
  258 00000174 E59F10EC 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  259 00000178 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  260 0000017C E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  261 00000180 0AFFFFFB        BEQ              put         ; empty
  262 00000184 E59F10E0        LDR              R1, =U0THR  ; R1 -> U0THR
  263 00000188 E5C10000        STRB             R0, [R1]    ; output charcter
  264 0000018C E59F10D4 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  265 00000190 E5D11000        LDRB             R1, [R1]    ; wait until



ARM Macro Assembler    Page 7 


  266 00000194 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  267 00000198 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  268 0000019C E12FFF1E        BX               LR          ; return
  269 000001A0         
  270 000001A0         ;
  271 000001A0         ; puts subroutine
  272 000001A0         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  273 000001A0         ; parameters:
  274 000001A0         ; R0 - address of NULL-terminated ASCII string
  275 000001A0         ; return value:
  276 000001A0         ; R0 - ASCII code of the character read on teh console (
                       byte)
  277 000001A0         ;
  278 000001A0 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  279 000001A4 E1A04000        MOV              R4, R0      ; copy R0
  280 000001A8 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  281 000001AC E3500000        CMP              R0, #0      ; 0?
  282 000001B0 0A000001        BEQ              puts1       ; return
  283 000001B4 EBFFFFEE        BL               put         ; put character
  284 000001B8 EAFFFFFA        B                puts0       ; next character
  285 000001BC E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  286 000001C0         
  287 000001C0         
  288 000001C0         ;
  289 000001C0         ; test arrays
  290 000001C0         ;
  291 000001C0         
  292 000001C0 00000001 
              00000002 
              00000003 
              00000004 ARR_A   DCD              1,  2,  3,  4
  293 000001D0 00000005 
              00000006 
              00000007 
              00000008         DCD              5,  6,  7,  8
  294 000001E0 00000009 
              0000000A 
              0000000B 
              0000000C         DCD              9, 10, 11, 12
  295 000001F0 0000000D 
              0000000E 
              0000000F 
              00000010         DCD              13, 14, 15, 16
  296 00000200         
  297 00000200 00000001 
              00000002 
              00000003 
              00000004 ARR_B   DCD              1,  2,  3,  4
  298 00000210 00000005 
              00000006 
              00000007 
              00000008         DCD              5,  6,  7,  8
  299 00000220 00000009 



ARM Macro Assembler    Page 8 


              0000000A 
              0000000B 
              0000000C         DCD              9, 10, 11, 12
  300 00000230 0000000D 
              0000000E 
              0000000F 
              00000010         DCD              13, 14, 15, 16
  301 00000240         
  302 00000240 49 6E 70 
              75 74 20 
              79 6F 75 
              72 20 73 
              74 72 69 
              6E 67 0A 
              00       STR0    DCB              "Input your string", 0x0a, 0
  303 00000253         
  304 00000253                 END
              00 00000000 
              00000000 
              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab2-subroutines.d -o.\objects\lab2-subroutines.o -IC:\Keil_v5\ARM\RV31\
INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab2-su
broutines.lst lab2-subroutines.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARR_R 00000020

Symbol: ARR_R
   Definitions
      At line 22 in file lab2-subroutines.s
   Uses
      None
Comment: ARR_R unused
BUFFER 00000000

Symbol: BUFFER
   Definitions
      At line 19 in file lab2-subroutines.s
   Uses
      None
Comment: BUFFER unused
globals 00000000

Symbol: globals
   Definitions
      At line 16 in file lab2-subroutines.s
   Uses
      None
Comment: globals unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

A 0000003C

Symbol: A
   Definitions
      At line 85 in file lab2-subroutines.s
   Uses
      At line 81 in file lab2-subroutines.s
Comment: A used once
ARR_A 000001C0

Symbol: ARR_A
   Definitions
      At line 292 in file lab2-subroutines.s
   Uses
      At line 43 in file lab2-subroutines.s
Comment: ARR_A used once
ARR_B 00000200

Symbol: ARR_B
   Definitions
      At line 297 in file lab2-subroutines.s
   Uses
      At line 44 in file lab2-subroutines.s
Comment: ARR_B used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 25 in file lab2-subroutines.s
   Uses
      None
Comment: RESET unused
STOP 00000024

Symbol: STOP
   Definitions
      At line 68 in file lab2-subroutines.s
   Uses
      At line 68 in file lab2-subroutines.s
Comment: STOP used once
STR0 00000240

Symbol: STR0
   Definitions
      At line 302 in file lab2-subroutines.s
   Uses
      At line 102 in file lab2-subroutines.s
Comment: STR0 used once
fLoop1End 00000118

Symbol: fLoop1End
   Definitions
      At line 189 in file lab2-subroutines.s
   Uses
      At line 141 in file lab2-subroutines.s
Comment: fLoop1End used once
fLoop1Start 000000A4

Symbol: fLoop1Start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 140 in file lab2-subroutines.s
   Uses
      At line 187 in file lab2-subroutines.s
Comment: fLoop1Start used once
fLoop2End 0000010C

Symbol: fLoop2End
   Definitions
      At line 183 in file lab2-subroutines.s
   Uses
      At line 145 in file lab2-subroutines.s
Comment: fLoop2End used once
fLoop2Start 000000AC

Symbol: fLoop2Start
   Definitions
      At line 144 in file lab2-subroutines.s
   Uses
      At line 181 in file lab2-subroutines.s
Comment: fLoop2Start used once
fLoop3End 000000F0

Symbol: fLoop3End
   Definitions
      At line 173 in file lab2-subroutines.s
   Uses
      At line 150 in file lab2-subroutines.s
Comment: fLoop3End used once
fLoop3Start 000000B8

Symbol: fLoop3Start
   Definitions
      At line 149 in file lab2-subroutines.s
   Uses
      At line 170 in file lab2-subroutines.s
Comment: fLoop3Start used once
get 00000158

Symbol: get
   Definitions
      At line 242 in file lab2-subroutines.s
   Uses
      At line 108 in file lab2-subroutines.s
Comment: get used once
get0 0000015C

Symbol: get0
   Definitions
      At line 243 in file lab2-subroutines.s
   Uses
      At line 245 in file lab2-subroutines.s
Comment: get0 used once
gets 00000044

Symbol: gets
   Definitions
      At line 99 in file lab2-subroutines.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: gets unused
gets0 0000005C

Symbol: gets0
   Definitions
      At line 106 in file lab2-subroutines.s
   Uses
      At line 114 in file lab2-subroutines.s
Comment: gets0 used once
getsE 00000080

Symbol: getsE
   Definitions
      At line 116 in file lab2-subroutines.s
   Uses
      At line 107 in file lab2-subroutines.s
      At line 111 in file lab2-subroutines.s

inithw 0000013C

Symbol: inithw
   Definitions
      At line 225 in file lab2-subroutines.s
   Uses
      At line 29 in file lab2-subroutines.s
Comment: inithw used once
matmul 00000088

Symbol: matmul
   Definitions
      At line 128 in file lab2-subroutines.s
   Uses
      At line 46 in file lab2-subroutines.s
Comment: matmul used once
max 00000028

Symbol: max
   Definitions
      At line 79 in file lab2-subroutines.s
   Uses
      None
Comment: max unused
max1 00000040

Symbol: max1
   Definitions
      At line 87 in file lab2-subroutines.s
   Uses
      At line 83 in file lab2-subroutines.s
Comment: max1 used once
put 00000174

Symbol: put
   Definitions
      At line 258 in file lab2-subroutines.s
   Uses
      At line 109 in file lab2-subroutines.s
      At line 261 in file lab2-subroutines.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 283 in file lab2-subroutines.s

put0 0000018C

Symbol: put0
   Definitions
      At line 264 in file lab2-subroutines.s
   Uses
      At line 267 in file lab2-subroutines.s
Comment: put0 used once
puts 000001A0

Symbol: puts
   Definitions
      At line 278 in file lab2-subroutines.s
   Uses
      At line 103 in file lab2-subroutines.s
Comment: puts used once
puts0 000001A8

Symbol: puts0
   Definitions
      At line 280 in file lab2-subroutines.s
   Uses
      At line 284 in file lab2-subroutines.s
Comment: puts0 used once
puts1 000001BC

Symbol: puts1
   Definitions
      At line 285 in file lab2-subroutines.s
   Uses
      At line 282 in file lab2-subroutines.s
Comment: puts1 used once
swap 0000011C

Symbol: swap
   Definitions
      At line 204 in file lab2-subroutines.s
   Uses
      At line 52 in file lab2-subroutines.s
Comment: swap used once
27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BUFLEN 00000020

Symbol: BUFLEN
   Definitions
      At line 7 in file lab2-subroutines.s
   Uses
      At line 19 in file lab2-subroutines.s
Comment: BUFLEN used once
N 00000004

Symbol: N
   Definitions
      At line 6 in file lab2-subroutines.s
   Uses
      At line 22 in file lab2-subroutines.s
      At line 131 in file lab2-subroutines.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 9 in file lab2-subroutines.s
   Uses
      At line 226 in file lab2-subroutines.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 12 in file lab2-subroutines.s
   Uses
      At line 229 in file lab2-subroutines.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 13 in file lab2-subroutines.s
   Uses
      At line 242 in file lab2-subroutines.s
      At line 258 in file lab2-subroutines.s
      At line 264 in file lab2-subroutines.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 10 in file lab2-subroutines.s
   Uses
      At line 246 in file lab2-subroutines.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 11 in file lab2-subroutines.s
   Uses
      At line 262 in file lab2-subroutines.s
Comment: U0THR used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

7 symbols
371 symbols in table
