


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000 00000007 
                       ROWSIZE EQU              7
   14 00000000 00000006 
                       COLUMNSIZE
                               EQU              6
   15 00000000 0000002A 
                       BOARDSIZE
                               EQU              42
   16 00000000 00000058 
                       XPIECE  EQU              88
   17 00000000 0000004F 
                       OPIECE  EQU              79
   18 00000000 0000003F 
                       EMPTYPIECE
                               EQU              63
   19 00000000 00000001 
                       SIZE    EQU              1
   20 00000000 00000020 
                       SPACEASCII
                               EQU              32
   21 00000000 0000007C 
                       HORLINE EQU              124
   22 00000000         
   23 00000000         
   24 00000000                 AREA             globals, DATA, READWRITE ; only
                                                             allocate the memor
                                                            y
   25 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   26 00000007 01 01 01 
              01 01 01 
              01               DCB              1,1,1,1,1,1,1
   27 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   28 00000015 01 01 01 
              01 01 01 
              01               DCB              1,1,1,1,1,1,1
   29 0000001C 00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00               DCB              0,0,0,0,0,0,0
   30 00000023 01 01 01 
              01 01 01 
              01               DCB              1,1,1,1,1,1,1
   31 0000002A         
   32 0000002A         
   33 0000002A                 AREA             RESET, CODE, READONLY
   34 00000000                 ENTRY
   35 00000000         
   36 00000000         ; initialise SP to top of RAM
   37 00000000 E59FD4EC        LDR              R13, =0x40010000 ; initialse SP
                                                            
   38 00000004         
   39 00000004         ; initialise the console
   40 00000004 EB0000E0        BL               inithw
   41 00000008         
   42 00000008         ;
   43 00000008         ; your program goes here
   44 00000008         ;
   45 00000008         
   46 00000008         ; initialize the board
   47 00000008 E59F04E8        LDR              R0,=BOARD
   48 0000000C E3A0102A        MOV              R1,#BOARDSIZE
   49 00000010 E3A0203F        MOV              R2,#EMPTYPIECE
   50 00000014 EB0000D6        BL               iniboard
   51 00000018         
   52 00000018         ; WELCOME STRING
   53 00000018 E59F04DC        LDR              R0,=str_go
   54 0000001C EB0000F3        BL               puts
   55 00000020         
   56 00000020 E59F04D0        LDR              R0,=BOARD
   57 00000024 EB0000A4        BL               printb
   58 00000028         
   59 00000028         ;; TEST FOR INPUT
   60 00000028         ; LDR R0,=BOARD
   61 00000028         ; MOV R1,#3
   62 00000028         ; MOV R2,#XPIECE
   63 00000028         ; BL input
   64 00000028         ; 
   65 00000028         ; LDR R0,=BOARD
   66 00000028         ; BL printb
   67 00000028         ; 
   68 00000028         
   69 00000028         
   70 00000028         ; INPUT 
   71 00000028 E3A09000        MOV              R9,#0       ; COUNT
   72 0000002C E3A07000        MOV              R7,#0       ; TOTAL PIECE
   73 00000030         
   74 00000030 E59F04C0 
                       game1   LDR              R0,=BOARD
   75 00000034 EB0000A0        BL               printb      ; calls printb subr
                                                            outine
   76 00000038 E357002A        CMP              R7,#BOARDSIZE 
                                                            ; IF BOARD IS FULL
   77 0000003C 2A00002E        BHS              EVEN
   78 00000040 E3590000        CMP              R9,#0       ; if O's
   79 00000044 8A000002        BHI              gameXA
   80 00000048         
   81 00000048 E59F04B0 



ARM Macro Assembler    Page 3 


                       gameOA  LDR              R0,=str_O   ; load O's string
   82 0000004C E3A0A04F        MOV              R10,#OPIECE ; PIECE = 0
   83 00000050 EA000001        B                gameI
   84 00000054         
   85 00000054 E59F04A8 
                       gameXA  LDR              R0,=str_X   ; loads X's string
   86 00000058 E3A0A058        MOV              R10,#XPIECE ; PIECE = X
   87 0000005C         
   88 0000005C EB0000E3 
                       gameI   BL               puts        ; output message fo
                                                            r input to console
   89 00000060 EB0000D0 
                       gameIL  BL               get         ; get user input
   90 00000064 EB0000D6        BL               put         ; output user input
                                                             to console
   91 00000068 E350000D        CMP              R0,#0x0D    ; if (char!= CR)
   92 0000006C 0A000005        BEQ              gameIE
   93 00000070 E2408030        SUB              R8,R0,#48   ; ascii conversion
   94 00000074 E59F048C        LDR              R0,=str_newl
   95 00000078 EB0000DC        BL               puts
   96 0000007C EAFFFFF7        B                gameIL
   97 00000080         
   98 00000080 E59F0484 
                       gameII  LDR              R0,=str_error ; loads error mes
                                                            sage
   99 00000084 EAFFFFF4        B                gameI
  100 00000088         
  101 00000088 E3580000 
                       gameIE  CMP              R8,#0       ; if the number is 
                                                            in range (0<i<=row)
                                                            
  102 0000008C 9AFFFFFB        BLS              gameII
  103 00000090 E3580007        CMP              R8,#ROWSIZE
  104 00000094 8AFFFFF9        BHI              gameII
  105 00000098         
  106 00000098 E59F0458 
                       gameInput
                               LDR              R0,=BOARD   ; LOADS BOARD ADDRE
                                                            SS
  107 0000009C E1A01008        MOV              R1,R8       ; MOVES COLUMN LOCA
                                                            TION
  108 000000A0 E1A0200A        MOV              R2,R10      ; MOVES PIECE
  109 000000A4 EB00001A        BL               input       ; calls input subro
                                                            utine
  110 000000A8 E3500000        CMP              R0,#0       ; if input is valid
                                                            
  111 000000AC 0AFFFFF3        BEQ              gameII
  112 000000B0         
  113 000000B0 E2877001        ADD              R7,R7,#1    ; TOTAL PIECE++
  114 000000B4 E1A01000        MOV              R1,R0       ; MOVE LOCATION TO 
                                                            R1
  115 000000B8 E59F0438        LDR              R0,=BOARD   ; LOADS BOARD ADDRE
                                                            SS
  116 000000BC E1A0200A        MOV              R2,R10      ; LOADS PIECE
  117 000000C0 EB000023        BL               check       ; calls check subro
                                                            utine
  118 000000C4 E3500001        CMP              R0,#1       ; if won
  119 000000C8 0A000005        BEQ              WON
  120 000000CC E3590000        CMP              R9,#0       ; CHANGE PLAYER



ARM Macro Assembler    Page 4 


  121 000000D0 0A000001        BEQ              OchangeX
  122 000000D4 E2499001        SUB              R9,R9,#1
  123 000000D8 EAFFFFD4        B                game1
  124 000000DC         
  125 000000DC E2899001 
                       OchangeX
                               ADD              R9,R9,#1
  126 000000E0 EAFFFFD2        B                game1
  127 000000E4         
  128 000000E4 E35A004F 
                       WON     CMP              R10,#OPIECE
  129 000000E8 0A000001        BEQ              OWON
  130 000000EC E59F041C        LDR              R0,=str_XWON
  131 000000F0 EA000003        B                finish
  132 000000F4         
  133 000000F4 E59F0418 
                       OWON    LDR              R0,=str_OWON
  134 000000F8 EA000001        B                finish
  135 000000FC         
  136 000000FC E59F0414 
                       EVEN    LDR              R0,=str_EVEN
  137 00000100 EAFFFFFF        B                finish
  138 00000104         
  139 00000104 EB0000B9 
                       finish  BL               puts
  140 00000108 E59F03E8        LDR              R0,=BOARD   ; prints the board
  141 0000010C EB00006A        BL               printb
  142 00000110         
  143 00000110 EAFFFFFE 
                       stop    B                stop
  144 00000114         
  145 00000114         
  146 00000114         ;
  147 00000114         ; your subroutines go here
  148 00000114         ;
  149 00000114         
  150 00000114         ; input
  151 00000114         ; adding pieces to the board by modifying the memory
  152 00000114         ; parameters:
  153 00000114         ; board address in R0
  154 00000114         ; column number in R1
  155 00000114         ;   piece in R2
  156 00000114         ; return values:
  157 00000114         ;  0 in R0 if move is invalid
  158 00000114         ;   location in R0 if valid
  159 00000114         
  160 00000114         input
  161 00000114 E92D4010        PUSH{R4,LR}
  162 00000118 E2411001        SUB              R1,R1,#1    ; index = number-1
  163 0000011C E1A04000        MOV              R4,R0       ; STORES STARTING A
                                                            DDRESS
  164 00000120 E280002A        ADD              R0,R0,#BOARDSIZE ; ADDRESS ON L
                                                            AST ROW
  165 00000124 E0800001        ADD              R0,R0,R1    ; LOCATION OF COLUM
                                                            N LAST ROW
  166 00000128         
  167 00000128 E5D01000 
                       input0  LDRB             R1,[R0]
  168 0000012C E351003F        CMP              R1,#EMPTYPIECE ; IF LOCATION IS



ARM Macro Assembler    Page 5 


                                                             EMPTY 
  169 00000130 1A000001        BNE              input1
  170 00000134 E5C02000        STRB             R2,[R0]     ; STORES PIECE IN L
                                                            OCATION
  171 00000138 EA000004        B                inputE
  172 0000013C         
  173 0000013C E2400007 
                       input1  SUB              R0,R0,#ROWSIZE ; LOCATION SET T
                                                            O UPPER ROW
  174 00000140 E1500004        CMP              R0,R4       ; IF LOCATION IS ST
                                                            ILL INBOUND
  175 00000144 3A000000        BLO              input2
  176 00000148 EAFFFFF6        B                input0
  177 0000014C         
  178 0000014C E3A00000 
                       input2  MOV              R0,#0
  179 00000150         
  180 00000150 E8BD8010 
                       inputE  POP{R4,PC}
  181 00000154         
  182 00000154         ; check subroutine
  183 00000154         ; check if the last move is winning move
  184 00000154         ; parameter:
  185 00000154         ;  board address in R0
  186 00000154         ;  piece location in R1
  187 00000154         ; piece in R2
  188 00000154         ; return value:
  189 00000154         ; 1 in R0 if win
  190 00000154         ;   0 in R0 if not
  191 00000154         
  192 00000154         check
  193 00000154 E92D47F0        PUSH{R4-R10,LR}
  194 00000158 E1A04000        MOV              R4,R0       ; STORES STARTING A
                                                            DDRESS 
  195 0000015C E284502A        ADD              R5,R4,#BOARDSIZE ; STORES END A
                                                            DDRESS+1
  196 00000160 E1A06001        MOV              R6,R1       ; PIECE LOCATION
  197 00000164 E1A07002        MOV              R7,R2       ; PIECE
  198 00000168         
  199 00000168 E1A00004 
                       ini     MOV              R0,R4       ; MOVES STARTING AD
                                                            DRESS TO R0
  200 0000016C         ; get horizontal boundaries
  201 0000016C E1500001 
                       Hbound  CMP              R0,R1       ; IF R0 IS LESSER T
                                                            HAN LOCATION
  202 00000170 2A000001        BHS              HboundE
  203 00000174 E2800007        ADD              R0,#ROWSIZE ; INCREMENT R0 BY R
                                                            OWSIZE
  204 00000178 EAFFFFFB        B                Hbound
  205 0000017C         
  206 0000017C E2400001 
                       HboundE SUB              R0,R0,#1    ; ALLIGN WITH PIECE
                                                             ROW
  207 00000180 E1A0A000        MOV              R10,R0      ; RIGHTMOST LOCATIO
                                                            N OF THE ROW
  208 00000184 E2409007        SUB              R9,R0,#ROWSIZE ; OUT-OF-BOUNDS 
                                                            LEFTMOST LOCATION O
                                                            F THE ROW



ARM Macro Assembler    Page 6 


  209 00000188         
  210 00000188         ;checks horizontal
  211 00000188 E1A01006 
                       inicheckH
                               MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  212 0000018C E3A00001        MOV              R0,#1       ; COUNTER
  213 00000190         
  214 00000190 E1510009 
                       checkHL CMP              R1,R9       ; if in bound
  215 00000194 9A000006        BLS              checkHLE
  216 00000198 E5712001        LDRB             R2,[R1,#-SIZE]! ; loads element
                                                             to the left
  217 0000019C E1520007        CMP              R2,R7       ; if equals
  218 000001A0 1A000003        BNE              checkHLE
  219 000001A4 E2800001        ADD              R0,R0,#1    ; counter++
  220 000001A8 E3500004        CMP              R0,#4       ; if counter>winCon
                                                            dtion
  221 000001AC 2A00003D        BHS              WIN
  222 000001B0 EAFFFFF6        B                checkHL
  223 000001B4         
  224 000001B4 E1A01006 
                       checkHLE
                               MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  225 000001B8 E151000A 
                       checkHR CMP              R1,R10
  226 000001BC 8A000006        BHI              inicheckV
  227 000001C0 E5F12001        LDRB             R2,[R1,#SIZE]! ; loads element 
                                                            to the right
  228 000001C4 E1520007        CMP              R2,R7       ; if equals
  229 000001C8 1A000003        BNE              inicheckV
  230 000001CC E2800001        ADD              R0,R0,#1    ; counter++
  231 000001D0 E3500004        CMP              R0,#4       ; if counter>winCon
                                                            dtion
  232 000001D4 2A000033        BHS              WIN
  233 000001D8 EAFFFFF6        B                checkHR
  234 000001DC         
  235 000001DC E1A01006 
                       inicheckV
                               MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  236 000001E0 E3A00001        MOV              R0,#1       ; reset counter
  237 000001E4         
  238 000001E4 E5F12007 
                       checkVDOWN
                               LDRB             R2,[R1,#ROWSIZE]!
  239 000001E8 E1520007        CMP              R2,R7       ; IF PIECE IS SAME
  240 000001EC 1A000003        BNE              checkVDOWNE
  241 000001F0 E2800001        ADD              R0,R0,#1    ; COUNTER++
  242 000001F4 E3500004        CMP              R0,#4       ; IF NOT WON
  243 000001F8 2A00002A        BHS              WIN
  244 000001FC EAFFFFF8        B                checkVDOWN
  245 00000200         
  246 00000200 E1A01006 
                       checkVDOWNE
                               MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  247 00000204 E5712007 



ARM Macro Assembler    Page 7 


                       checkVUP
                               LDRB             R2,[R1,#-ROWSIZE]!
  248 00000208 E1520007        CMP              R2,R7       ; IF PIECE IS SAME
  249 0000020C 1A000003        BNE              inicheckDLUP
  250 00000210 E2800001        ADD              R0,R0,#1    ; COUNTER++
  251 00000214 E3500004        CMP              R0,#4       ; IF NOT WON
  252 00000218 2A000022        BHS              WIN
  253 0000021C EAFFFFF8        B                checkVUP
  254 00000220         
  255 00000220 E3A00001 
                       inicheckDLUP
                               MOV              R0,#1       ; COUNTER
  256 00000224 E1A01006        MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  257 00000228 E5712008 
                       checkDLUP
                               LDRB             R2,[R1,#-ROWSIZE-1]! ; LOADS PI
                                                            ECE ELEMENT
  258 0000022C E1520007        CMP              R2,R7       ; IF SAME WITH PIEC
                                                            E
  259 00000230 1A000003        BNE              checkDLUPE
  260 00000234 E2800001        ADD              R0,R0,#1    ; COUNTER++
  261 00000238 E3500004        CMP              R0,#4       ; IF NOT WON
  262 0000023C 2A000019        BHS              WIN
  263 00000240 EAFFFFF8        B                checkDLUP
  264 00000244         
  265 00000244 E1A01006 
                       checkDLUPE
                               MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  266 00000248 E5F12008 
                       checkDLDOWN
                               LDRB             R2,[R1,#ROWSIZE+1]! ; LOADS PIE
                                                            CE ELEMENT
  267 0000024C E1520007        CMP              R2,R7       ; IF SAME WITH PIEC
                                                            E
  268 00000250 1A000003        BNE              inicheckDRUP
  269 00000254 E2800001        ADD              R0,R0,#1    ; COUNTER++
  270 00000258 E3500004        CMP              R0,#4       ; IF NOT WON
  271 0000025C 2A000011        BHS              WIN
  272 00000260 EAFFFFF8        B                checkDLDOWN
  273 00000264         
  274 00000264 E3A00001 
                       inicheckDRUP
                               MOV              R0,#1       ; COUNTER
  275 00000268 E1A01006        MOV              R1,R6       ; MOVES PIECE LOCAT
                                                            ION TO R1
  276 0000026C E5712006 
                       checkDRUP
                               LDRB             R2,[R1,#-ROWSIZE+1]! ; LOADS PI
                                                            ECE ELEMENT
  277 00000270 E1520007        CMP              R2,R7       ; IF SAME WITH PIEC
                                                            E
  278 00000274 1A000003        BNE              checkDRUPE
  279 00000278 E2800001        ADD              R0,R0,#1    ; COUNTER++
  280 0000027C E3500004        CMP              R0,#4       ; IF NOT WON
  281 00000280 2A000008        BHS              WIN
  282 00000284 EAFFFFF8        B                checkDRUP
  283 00000288         



ARM Macro Assembler    Page 8 


  284 00000288 E1A01006 
                       checkDRUPE
                               MOV              R1,R6       ; MOVES PEICE LOCAT
                                                            ION TO R1
  285 0000028C E5F12006 
                       checkDRDOWN
                               LDRB             R2,[R1,#ROWSIZE-1]! ; LOADS PIE
                                                            CE ELEMENT
  286 00000290 E1520007        CMP              R2,R7       ; IF SAME WITH PIEC
                                                            E
  287 00000294 1A000005        BNE              LOSE
  288 00000298 E2800001        ADD              R0,R0,#1    ; COUNTER++
  289 0000029C E3500004        CMP              R0,#4       ; IF NOT WON
  290 000002A0 2A000000        BHS              WIN
  291 000002A4 EAFFFFF8        B                checkDRDOWN
  292 000002A8         
  293 000002A8 E3A00001 
                       WIN     MOV              R0,#1       ; WINS
  294 000002AC EA000001        B                checkE
  295 000002B0         
  296 000002B0 E3A00000 
                       LOSE    MOV              R0,#0       ; NOT WON
  297 000002B4 EAFFFFFF        B                checkE
  298 000002B8         
  299 000002B8 E8BD87F0 
                       checkE  POP{R4-R10,PC}
  300 000002BC         
  301 000002BC         ;
  302 000002BC         ; printb subroutine
  303 000002BC         ; prints boards to console
  304 000002BC         ; paremeters:
  305 000002BC         ;  board address in R0
  306 000002BC         ; return value:
  307 000002BC         ;  none
  308 000002BC         printb
  309 000002BC E92D40F0        PUSH             {R4-R7,LR}
  310 000002C0 E1A04000        MOV              R4,R0       ; COPIES STARTING A
                                                            DDRESS
  311 000002C4 E3A05000        MOV              R5,#0       ; COUNTER
  312 000002C8 E3A06000        MOV              R6,#0       ; ROW-COUNTER
  313 000002CC E3A07000        MOV              R7,#0       ; ROW
  314 000002D0         ;LDR R0,=str_newl ; new line
  315 000002D0         ;BL puts
  316 000002D0 E3A00020        MOV              R0,#SPACEASCII
  317 000002D4 EB00003A        BL               put
  318 000002D8         
  319 000002D8         ; prints out column number
  320 000002D8 E3A0007C 
                       printt1 MOV              R0,#HORLINE ; HORIZONAL SPACING
                                                            
  321 000002DC EB000038        BL               put
  322 000002E0 E3560007        CMP              R6,#ROWSIZE ; if finished the r
                                                            ow
  323 000002E4 2A000003        BHS              printt1E
  324 000002E8 E2860031        ADD              R0,R6,#48+1 ; ASCII conversion
  325 000002EC EB000034        BL               put
  326 000002F0 E2866001        ADD              R6,R6,#1    ; column++
  327 000002F4 EAFFFFF7        B                printt1
  328 000002F8         



ARM Macro Assembler    Page 9 


  329 000002F8 E59F0208 
                       printt1E
                               LDR              R0,=str_newl ; prints new line
  330 000002FC EB00003B        BL               puts
  331 00000300 E3A06000        MOV              R6,#0       ; reset row counter
                                                            
  332 00000304 E2860031        ADD              R0,R6,#48+1 ; prints row number
                                                            
  333 00000308 E2877001        ADD              R7,R7,#1    ; next row
  334 0000030C EB00002C        BL               put
  335 00000310         
  336 00000310 E355002A 
                       printb1 CMP              R5,#BOARDSIZE ; if not finished
                                                            
  337 00000314 2A000011        BHS              printbE
  338 00000318 E3560007        CMP              R6,#ROWSIZE ; if finished a row
                                                            
  339 0000031C 2A000006        BHS              printb3
  340 00000320         
  341 00000320 E3A0007C 
                       printb2 MOV              R0,#HORLINE ; HORIZONAL SPACING
                                                            
  342 00000324 EB000026        BL               put
  343 00000328 E4D40001        LDRB             R0,[R4],#SIZE ; put pieces on c
                                                            onsole, post increm
                                                            ent to next
  344 0000032C EB000024        BL               put
  345 00000330 E2855001        ADD              R5,R5,#1    ; counter++
  346 00000334 E2866001        ADD              R6,R6,#1    ; row-counter++
  347 00000338 EAFFFFF4        B                printb1
  348 0000033C         
  349 0000033C E3A0007C 
                       printb3 MOV              R0,#HORLINE ; HORIZONAL SPACING
                                                            
  350 00000340 EB00001F        BL               put
  351 00000344 E59F01BC        LDR              R0,=str_newl ; new line
  352 00000348 EB000028        BL               puts
  353 0000034C E3A06000        MOV              R6,#0       ; reset ROW-COUNTER
                                                            
  354 00000350 E2877001        ADD              R7,R7,#1    ; row++
  355 00000354 E2870030        ADD              R0,R7,#48   ; ASCII conversion 
                                                              
  356 00000358 EB000019        BL               put         ; prints row number
                                                            
  357 0000035C EAFFFFEB        B                printb1
  358 00000360         
  359 00000360 E3A0007C 
                       printbE MOV              R0,#HORLINE ; HORIZONAL SPACING
                                                            
  360 00000364 EB000016        BL               put
  361 00000368 E59F0198        LDR              R0,=str_newl
  362 0000036C EB00001F        BL               puts
  363 00000370 E8BD80F0        POP{R4-R7,PC}
  364 00000374         
  365 00000374         ;
  366 00000374         ; iniboard subroutine
  367 00000374         ; initialize the board with a given value
  368 00000374         ; parameters:
  369 00000374         ;  starting address in R0



ARM Macro Assembler    Page 10 


  370 00000374         ;  total size in R1
  371 00000374         ;  element to be filled in R2
  372 00000374         ; return value:
  373 00000374         ;  none
  374 00000374         
  375 00000374         
  376 00000374 E3510000 
                       iniboard
                               CMP              R1,#0
  377 00000378 9A000002        BLS              iniboardE
  378 0000037C E4C02001        STRB             R2,[R0],#SIZE
  379 00000380 E2411001        SUB              R1,R1,#1
  380 00000384 EAFFFFFA        B                iniboard
  381 00000388         
  382 00000388 E12FFF1E 
                       iniboardE
                               BX               LR
  383 0000038C         
  384 0000038C         ;
  385 0000038C         ; inithw subroutines
  386 0000038C         ; performs hardware initialisation, including console
  387 0000038C         ; parameters:
  388 0000038C         ; none
  389 0000038C         ; return value:
  390 0000038C         ; none
  391 0000038C         ;
  392 0000038C         inithw
  393 0000038C E59F0194        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  394 00000390 E3A01050        MOV              R1, #0x50
  395 00000394 E5C01000        STRB             R1, [R0]
  396 00000398 E59F018C        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  397 0000039C E3A01002        LDR              R1, =0x02
  398 000003A0 E5C01000        STRB             R1, [R0]
  399 000003A4 E12FFF1E        BX               LR
  400 000003A8         
  401 000003A8         ;
  402 000003A8         ; get subroutine
  403 000003A8         ; returns the ASCII code of the next character read on t
                       he console
  404 000003A8         ; parameters:
  405 000003A8         ; none
  406 000003A8         ; return value:
  407 000003A8         ; R0 - ASCII code of the character read on teh console (
                       byte)
  408 000003A8         ;
  409 000003A8 E59F1180 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  410 000003AC E5910000 
                       get0    LDR              R0, [R1]    ; wait until
  411 000003B0 E2100001        ANDS             R0, #0x01   ; receiver data
  412 000003B4 0AFFFFFC        BEQ              get0        ; ready
  413 000003B8 E59F1174        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  414 000003BC E5D10000        LDRB             R0, [R1]    ; get received data
                                                            



ARM Macro Assembler    Page 11 


  415 000003C0 E12FFF1E        BX               LR          ; return
  416 000003C4         
  417 000003C4         ;
  418 000003C4         ; put subroutine
  419 000003C4         ; writes a character to the console
  420 000003C4         ; parameters:
  421 000003C4         ; R0 - ASCII code of the character to write
  422 000003C4         ; return value:
  423 000003C4         ; none
  424 000003C4         ;
  425 000003C4 E59F1164 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  426 000003C8 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  427 000003CC E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  428 000003D0 0AFFFFFB        BEQ              put         ; empty
  429 000003D4 E59F1158        LDR              R1, =U0THR  ; R1 -> U0THR
  430 000003D8 E5C10000        STRB             R0, [R1]    ; output charcter
  431 000003DC E59F114C 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  432 000003E0 E5D11000        LDRB             R1, [R1]    ; wait until
  433 000003E4 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  434 000003E8 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  435 000003EC E12FFF1E        BX               LR          ; return
  436 000003F0         
  437 000003F0         ;
  438 000003F0         ; puts subroutine
  439 000003F0         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  440 000003F0         ; parameters:
  441 000003F0         ; R0 - address of NULL-terminated ASCII string
  442 000003F0         ; return value:
  443 000003F0         ; R0 - ASCII code of the character read on teh console (
                       byte)
  444 000003F0         ;
  445 000003F0 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  446 000003F4 E1A04000        MOV              R4, R0      ; copy R0
  447 000003F8 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  448 000003FC E3500000        CMP              R0, #0      ; 0?
  449 00000400 0A000001        BEQ              puts1       ; return
  450 00000404 EBFFFFEE        BL               put         ; put character
  451 00000408 EAFFFFFA        B                puts0       ; next character
  452 0000040C E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  453 00000410         
  454 00000410         
  455 00000410         ;
  456 00000410         ; hint! put the strings used by your program here ...
  457 00000410         ;
  458 00000410         
  459 00000410         str_go
  460 00000410 4C 65 74 
              27 73 20 



ARM Macro Assembler    Page 12 


              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 21 
              0A 0D 00         DCB              "Let's play Connect4!!",0xA, 0x
D, 0
  461 00000428         
  462 00000428         str_newl
  463 00000428 20 0D 0A 
              0D 00            DCB              " ",0xD, 0xA, 0xD, 0
  464 0000042D         
  465 0000042D         str_error
  466 0000042D 45 72 72 
              6F 72 2C 
              20 74 72 
              79 20 61 
              67 61 69 
              6E 2E 0D 
              0A 0D 00         DCB              "Error, try again.",0xD, 0xA, 0
xD, 0
  467 00000442         
  468 00000442         str_X
  469 00000442 58 27 73 
              20 54 75 
              72 6E 2E 
              20 45 6E 
              74 65 72 
              20 63 6F 
              6C 75 6D 
              6E 20 6E 
              75 6D 62 
              65 72 28 
              6F 6E 6C 
              79 20 6C 
              61 73 74 
              20 64 69 
              67 69 74 
              20 77 69 
              6C 6C 20 
              62 65 20 
              74 61 6B 
              65 6E 29 
              3A 0D 0A 
              0D 00            DCB              "X's Turn. Enter column number(
only last digit will be taken):",0xD, 0xA, 0xD, 0
  470 00000483         
  471 00000483         str_O
  472 00000483 4F 27 73 
              20 54 75 
              72 6E 2E 
              20 45 6E 
              74 65 72 
              20 63 6F 
              6C 75 6D 
              6E 20 6E 
              75 6D 62 
              65 72 28 
              6F 6E 6C 



ARM Macro Assembler    Page 13 


              79 20 6C 
              61 73 74 
              20 64 69 
              67 69 74 
              20 77 69 
              6C 6C 20 
              62 65 20 
              74 61 6B 
              65 6E 29 
              3A 0D 0A 
              0D 00            DCB              "O's Turn. Enter column number(
only last digit will be taken):",0xD, 0xA, 0xD, 0
  473 000004C4         
  474 000004C4         str_OWON
  475 000004C4 4F 20 77 
              6F 6E 21 
              3A 0D 0A 
              00               DCB              "O won!:",0xD, 0xA, 0
  476 000004CE         
  477 000004CE         str_XWON
  478 000004CE 58 20 77 
              6F 6E 21 
              0D 0A 00         DCB              "X won!",0xD, 0xA, 0
  479 000004D7         
  480 000004D7         str_EVEN
  481 000004D7 54 68 65 
              20 6D 61 
              74 63 68 
              20 65 6E 
              64 65 64 
              20 69 6E 
              20 65 76 
              65 6E 0D 
              0A 00            DCB              "The match ended in even",0xD, 
0xA, 0
  482 000004F1         
  483 000004F1                 END
              00 00 00 
              40010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -ID:\Software\ARM\ARM\RV31\INC -ID:\So
ftware\ARM\ARM\CMSIS\Include -ID:\Software\ARM\ARM\INC\Philips --predefine="__E
VAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings\connect4



ARM Macro Assembler    Page 14 


.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 25 in file connect4.s
   Uses
      At line 47 in file connect4.s
      At line 56 in file connect4.s
      At line 74 in file connect4.s
      At line 106 in file connect4.s
      At line 115 in file connect4.s
      At line 140 in file connect4.s

globals 00000000

Symbol: globals
   Definitions
      At line 24 in file connect4.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EVEN 000000FC

Symbol: EVEN
   Definitions
      At line 136 in file connect4.s
   Uses
      At line 77 in file connect4.s
Comment: EVEN used once
Hbound 0000016C

Symbol: Hbound
   Definitions
      At line 201 in file connect4.s
   Uses
      At line 204 in file connect4.s
Comment: Hbound used once
HboundE 0000017C

Symbol: HboundE
   Definitions
      At line 206 in file connect4.s
   Uses
      At line 202 in file connect4.s
Comment: HboundE used once
LOSE 000002B0

Symbol: LOSE
   Definitions
      At line 296 in file connect4.s
   Uses
      At line 287 in file connect4.s
Comment: LOSE used once
OWON 000000F4

Symbol: OWON
   Definitions
      At line 133 in file connect4.s
   Uses
      At line 129 in file connect4.s
Comment: OWON used once
OchangeX 000000DC

Symbol: OchangeX
   Definitions
      At line 125 in file connect4.s
   Uses
      At line 121 in file connect4.s
Comment: OchangeX used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 33 in file connect4.s
   Uses
      None
Comment: RESET unused
WIN 000002A8

Symbol: WIN



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 293 in file connect4.s
   Uses
      At line 221 in file connect4.s
      At line 232 in file connect4.s
      At line 243 in file connect4.s
      At line 252 in file connect4.s
      At line 262 in file connect4.s
      At line 271 in file connect4.s
      At line 281 in file connect4.s
      At line 290 in file connect4.s

WON 000000E4

Symbol: WON
   Definitions
      At line 128 in file connect4.s
   Uses
      At line 119 in file connect4.s
Comment: WON used once
check 00000154

Symbol: check
   Definitions
      At line 192 in file connect4.s
   Uses
      At line 117 in file connect4.s
Comment: check used once
checkDLDOWN 00000248

Symbol: checkDLDOWN
   Definitions
      At line 266 in file connect4.s
   Uses
      At line 272 in file connect4.s
Comment: checkDLDOWN used once
checkDLUP 00000228

Symbol: checkDLUP
   Definitions
      At line 257 in file connect4.s
   Uses
      At line 263 in file connect4.s
Comment: checkDLUP used once
checkDLUPE 00000244

Symbol: checkDLUPE
   Definitions
      At line 265 in file connect4.s
   Uses
      At line 259 in file connect4.s
Comment: checkDLUPE used once
checkDRDOWN 0000028C

Symbol: checkDRDOWN
   Definitions
      At line 285 in file connect4.s
   Uses
      At line 291 in file connect4.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: checkDRDOWN used once
checkDRUP 0000026C

Symbol: checkDRUP
   Definitions
      At line 276 in file connect4.s
   Uses
      At line 282 in file connect4.s
Comment: checkDRUP used once
checkDRUPE 00000288

Symbol: checkDRUPE
   Definitions
      At line 284 in file connect4.s
   Uses
      At line 278 in file connect4.s
Comment: checkDRUPE used once
checkE 000002B8

Symbol: checkE
   Definitions
      At line 299 in file connect4.s
   Uses
      At line 294 in file connect4.s
      At line 297 in file connect4.s

checkHL 00000190

Symbol: checkHL
   Definitions
      At line 214 in file connect4.s
   Uses
      At line 222 in file connect4.s
Comment: checkHL used once
checkHLE 000001B4

Symbol: checkHLE
   Definitions
      At line 224 in file connect4.s
   Uses
      At line 215 in file connect4.s
      At line 218 in file connect4.s

checkHR 000001B8

Symbol: checkHR
   Definitions
      At line 225 in file connect4.s
   Uses
      At line 233 in file connect4.s
Comment: checkHR used once
checkVDOWN 000001E4

Symbol: checkVDOWN
   Definitions
      At line 238 in file connect4.s
   Uses
      At line 244 in file connect4.s
Comment: checkVDOWN used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

checkVDOWNE 00000200

Symbol: checkVDOWNE
   Definitions
      At line 246 in file connect4.s
   Uses
      At line 240 in file connect4.s
Comment: checkVDOWNE used once
checkVUP 00000204

Symbol: checkVUP
   Definitions
      At line 247 in file connect4.s
   Uses
      At line 253 in file connect4.s
Comment: checkVUP used once
finish 00000104

Symbol: finish
   Definitions
      At line 139 in file connect4.s
   Uses
      At line 131 in file connect4.s
      At line 134 in file connect4.s
      At line 137 in file connect4.s

game1 00000030

Symbol: game1
   Definitions
      At line 74 in file connect4.s
   Uses
      At line 123 in file connect4.s
      At line 126 in file connect4.s

gameI 0000005C

Symbol: gameI
   Definitions
      At line 88 in file connect4.s
   Uses
      At line 83 in file connect4.s
      At line 99 in file connect4.s

gameIE 00000088

Symbol: gameIE
   Definitions
      At line 101 in file connect4.s
   Uses
      At line 92 in file connect4.s
Comment: gameIE used once
gameII 00000080

Symbol: gameII
   Definitions
      At line 98 in file connect4.s
   Uses
      At line 102 in file connect4.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 104 in file connect4.s
      At line 111 in file connect4.s

gameIL 00000060

Symbol: gameIL
   Definitions
      At line 89 in file connect4.s
   Uses
      At line 96 in file connect4.s
Comment: gameIL used once
gameInput 00000098

Symbol: gameInput
   Definitions
      At line 106 in file connect4.s
   Uses
      None
Comment: gameInput unused
gameOA 00000048

Symbol: gameOA
   Definitions
      At line 81 in file connect4.s
   Uses
      None
Comment: gameOA unused
gameXA 00000054

Symbol: gameXA
   Definitions
      At line 85 in file connect4.s
   Uses
      At line 79 in file connect4.s
Comment: gameXA used once
get 000003A8

Symbol: get
   Definitions
      At line 409 in file connect4.s
   Uses
      At line 89 in file connect4.s
Comment: get used once
get0 000003AC

Symbol: get0
   Definitions
      At line 410 in file connect4.s
   Uses
      At line 412 in file connect4.s
Comment: get0 used once
ini 00000168

Symbol: ini
   Definitions
      At line 199 in file connect4.s
   Uses
      None
Comment: ini unused



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

iniboard 00000374

Symbol: iniboard
   Definitions
      At line 376 in file connect4.s
   Uses
      At line 50 in file connect4.s
      At line 380 in file connect4.s

iniboardE 00000388

Symbol: iniboardE
   Definitions
      At line 382 in file connect4.s
   Uses
      At line 377 in file connect4.s
Comment: iniboardE used once
inicheckDLUP 00000220

Symbol: inicheckDLUP
   Definitions
      At line 255 in file connect4.s
   Uses
      At line 249 in file connect4.s
Comment: inicheckDLUP used once
inicheckDRUP 00000264

Symbol: inicheckDRUP
   Definitions
      At line 274 in file connect4.s
   Uses
      At line 268 in file connect4.s
Comment: inicheckDRUP used once
inicheckH 00000188

Symbol: inicheckH
   Definitions
      At line 211 in file connect4.s
   Uses
      None
Comment: inicheckH unused
inicheckV 000001DC

Symbol: inicheckV
   Definitions
      At line 235 in file connect4.s
   Uses
      At line 226 in file connect4.s
      At line 229 in file connect4.s

inithw 0000038C

Symbol: inithw
   Definitions
      At line 392 in file connect4.s
   Uses
      At line 40 in file connect4.s
Comment: inithw used once
input 00000114



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


Symbol: input
   Definitions
      At line 160 in file connect4.s
   Uses
      At line 109 in file connect4.s
Comment: input used once
input0 00000128

Symbol: input0
   Definitions
      At line 167 in file connect4.s
   Uses
      At line 176 in file connect4.s
Comment: input0 used once
input1 0000013C

Symbol: input1
   Definitions
      At line 173 in file connect4.s
   Uses
      At line 169 in file connect4.s
Comment: input1 used once
input2 0000014C

Symbol: input2
   Definitions
      At line 178 in file connect4.s
   Uses
      At line 175 in file connect4.s
Comment: input2 used once
inputE 00000150

Symbol: inputE
   Definitions
      At line 180 in file connect4.s
   Uses
      At line 171 in file connect4.s
Comment: inputE used once
printb 000002BC

Symbol: printb
   Definitions
      At line 308 in file connect4.s
   Uses
      At line 57 in file connect4.s
      At line 75 in file connect4.s
      At line 141 in file connect4.s

printb1 00000310

Symbol: printb1
   Definitions
      At line 336 in file connect4.s
   Uses
      At line 347 in file connect4.s
      At line 357 in file connect4.s

printb2 00000320



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols


Symbol: printb2
   Definitions
      At line 341 in file connect4.s
   Uses
      None
Comment: printb2 unused
printb3 0000033C

Symbol: printb3
   Definitions
      At line 349 in file connect4.s
   Uses
      At line 339 in file connect4.s
Comment: printb3 used once
printbE 00000360

Symbol: printbE
   Definitions
      At line 359 in file connect4.s
   Uses
      At line 337 in file connect4.s
Comment: printbE used once
printt1 000002D8

Symbol: printt1
   Definitions
      At line 320 in file connect4.s
   Uses
      At line 327 in file connect4.s
Comment: printt1 used once
printt1E 000002F8

Symbol: printt1E
   Definitions
      At line 329 in file connect4.s
   Uses
      At line 323 in file connect4.s
Comment: printt1E used once
put 000003C4

Symbol: put
   Definitions
      At line 425 in file connect4.s
   Uses
      At line 90 in file connect4.s
      At line 317 in file connect4.s
      At line 321 in file connect4.s
      At line 325 in file connect4.s
      At line 334 in file connect4.s
      At line 342 in file connect4.s
      At line 344 in file connect4.s
      At line 350 in file connect4.s
      At line 356 in file connect4.s
      At line 360 in file connect4.s
      At line 428 in file connect4.s
      At line 450 in file connect4.s

put0 000003DC



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols


Symbol: put0
   Definitions
      At line 431 in file connect4.s
   Uses
      At line 434 in file connect4.s
Comment: put0 used once
puts 000003F0

Symbol: puts
   Definitions
      At line 445 in file connect4.s
   Uses
      At line 54 in file connect4.s
      At line 88 in file connect4.s
      At line 95 in file connect4.s
      At line 139 in file connect4.s
      At line 330 in file connect4.s
      At line 352 in file connect4.s
      At line 362 in file connect4.s

puts0 000003F8

Symbol: puts0
   Definitions
      At line 447 in file connect4.s
   Uses
      At line 451 in file connect4.s
Comment: puts0 used once
puts1 0000040C

Symbol: puts1
   Definitions
      At line 452 in file connect4.s
   Uses
      At line 449 in file connect4.s
Comment: puts1 used once
stop 00000110

Symbol: stop
   Definitions
      At line 143 in file connect4.s
   Uses
      At line 143 in file connect4.s
Comment: stop used once
str_EVEN 000004D7

Symbol: str_EVEN
   Definitions
      At line 480 in file connect4.s
   Uses
      At line 136 in file connect4.s
Comment: str_EVEN used once
str_O 00000483

Symbol: str_O
   Definitions
      At line 471 in file connect4.s
   Uses



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 81 in file connect4.s
Comment: str_O used once
str_OWON 000004C4

Symbol: str_OWON
   Definitions
      At line 474 in file connect4.s
   Uses
      At line 133 in file connect4.s
Comment: str_OWON used once
str_X 00000442

Symbol: str_X
   Definitions
      At line 468 in file connect4.s
   Uses
      At line 85 in file connect4.s
Comment: str_X used once
str_XWON 000004CE

Symbol: str_XWON
   Definitions
      At line 477 in file connect4.s
   Uses
      At line 130 in file connect4.s
Comment: str_XWON used once
str_error 0000042D

Symbol: str_error
   Definitions
      At line 465 in file connect4.s
   Uses
      At line 98 in file connect4.s
Comment: str_error used once
str_go 00000410

Symbol: str_go
   Definitions
      At line 459 in file connect4.s
   Uses
      At line 53 in file connect4.s
Comment: str_go used once
str_newl 00000428

Symbol: str_newl
   Definitions
      At line 462 in file connect4.s
   Uses
      At line 94 in file connect4.s
      At line 329 in file connect4.s
      At line 351 in file connect4.s
      At line 361 in file connect4.s

68 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BOARDSIZE 0000002A

Symbol: BOARDSIZE
   Definitions
      At line 15 in file connect4.s
   Uses
      At line 48 in file connect4.s
      At line 76 in file connect4.s
      At line 164 in file connect4.s
      At line 195 in file connect4.s
      At line 336 in file connect4.s

COLUMNSIZE 00000006

Symbol: COLUMNSIZE
   Definitions
      At line 14 in file connect4.s
   Uses
      None
Comment: COLUMNSIZE unused
EMPTYPIECE 0000003F

Symbol: EMPTYPIECE
   Definitions
      At line 18 in file connect4.s
   Uses
      At line 49 in file connect4.s
      At line 168 in file connect4.s

HORLINE 0000007C

Symbol: HORLINE
   Definitions
      At line 21 in file connect4.s
   Uses
      At line 320 in file connect4.s
      At line 341 in file connect4.s
      At line 349 in file connect4.s
      At line 359 in file connect4.s

OPIECE 0000004F

Symbol: OPIECE
   Definitions
      At line 17 in file connect4.s
   Uses
      At line 82 in file connect4.s
      At line 128 in file connect4.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 393 in file connect4.s
Comment: PINSEL0 used once
ROWSIZE 00000007




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: ROWSIZE
   Definitions
      At line 13 in file connect4.s
   Uses
      At line 103 in file connect4.s
      At line 173 in file connect4.s
      At line 203 in file connect4.s
      At line 208 in file connect4.s
      At line 238 in file connect4.s
      At line 247 in file connect4.s
      At line 257 in file connect4.s
      At line 266 in file connect4.s
      At line 276 in file connect4.s
      At line 285 in file connect4.s
      At line 322 in file connect4.s
      At line 338 in file connect4.s

SIZE 00000001

Symbol: SIZE
   Definitions
      At line 19 in file connect4.s
   Uses
      At line 216 in file connect4.s
      At line 227 in file connect4.s
      At line 343 in file connect4.s
      At line 378 in file connect4.s

SPACEASCII 00000020

Symbol: SPACEASCII
   Definitions
      At line 20 in file connect4.s
   Uses
      At line 316 in file connect4.s
Comment: SPACEASCII used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 396 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 12 in file connect4.s
   Uses
      At line 409 in file connect4.s
      At line 425 in file connect4.s
      At line 431 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 413 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 429 in file connect4.s
Comment: U0THR used once
XPIECE 00000058

Symbol: XPIECE
   Definitions
      At line 16 in file connect4.s
   Uses
      At line 86 in file connect4.s
Comment: XPIECE used once
14 symbols
418 symbols in table
